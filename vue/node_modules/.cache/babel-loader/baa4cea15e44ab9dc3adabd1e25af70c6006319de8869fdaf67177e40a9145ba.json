{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"@/router\";\nimport Cookies from \"js-cookie\";\nconst request = axios.create({\n  baseURL: \"http://localhost:9090/api\",\n  timeout: 5000\n});\n\n//request 拦截器，自请求发送前对请求做一些处理，比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  const adminJSon = Cookies.get('admin');\n  if (adminJSon) {\n    //设置请求头\n    config.headers['tokens'] = JSON.parse(adminJSon).token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n//response拦截器，可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  //兼容服务端返回的字符串数据\n  if (typeof res == 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === '401') {\n    router.push('/login');\n  }\n  return res;\n}, error => {\n  console.log('err' + error);\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","Cookies","request","create","baseURL","timeout","interceptors","use","config","headers","adminJSon","get","JSON","parse","token","error","Promise","reject","response","res","data","code","push","console","log"],"sources":["D:/Computer/Java/library-management/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"@/router\";\r\nimport Cookies from \"js-cookie\";\r\nconst request=axios.create({\r\n    baseURL:\"http://localhost:9090/api\",\r\n    timeout:5000\r\n})\r\n\r\n//request 拦截器，自请求发送前对请求做一些处理，比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config=>{\r\n    config.headers['Content-Type']='application/json;charset=utf-8';\r\n    const adminJSon = Cookies.get('admin');\r\n    if(adminJSon){\r\n        //设置请求头\r\n        config.headers['tokens']=JSON.parse(adminJSon).token\r\n    }\r\n    return config\r\n},error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n//response拦截器，可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response=>{\r\n        let res=response.data;\r\n        //兼容服务端返回的字符串数据\r\n        if(typeof res=='string'){\r\n            res=res?JSON.parse(res):res\r\n        }\r\n        if(res.code==='401'){\r\n            router.push('/login')\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err'+error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default request"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAC/B,MAAMC,OAAO,GAACH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAC,2BAA2B;EACnCC,OAAO,EAAC;AACZ,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAE;EACrCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAC,gCAAgC;EAC/D,MAAMC,SAAS,GAAGT,OAAO,CAACU,GAAG,CAAC,OAAO,CAAC;EACtC,IAAGD,SAAS,EAAC;IACT;IACAF,MAAM,CAACC,OAAO,CAAC,QAAQ,CAAC,GAACG,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC,CAACI,KAAK;EACxD;EACA,OAAON,MAAM;AACjB,CAAC,EAACO,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACAb,OAAO,CAACI,YAAY,CAACY,QAAQ,CAACX,GAAG,CAC7BW,QAAQ,IAAE;EACN,IAAIC,GAAG,GAACD,QAAQ,CAACE,IAAI;EACrB;EACA,IAAG,OAAOD,GAAG,IAAE,QAAQ,EAAC;IACpBA,GAAG,GAACA,GAAG,GAACP,IAAI,CAACC,KAAK,CAACM,GAAG,CAAC,GAACA,GAAG;EAC/B;EACA,IAAGA,GAAG,CAACE,IAAI,KAAG,KAAK,EAAC;IAChBrB,MAAM,CAACsB,IAAI,CAAC,QAAQ,CAAC;EACzB;EACA,OAAOH,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLQ,OAAO,CAACC,GAAG,CAAC,KAAK,GAACT,KAAK,CAAC;EACxB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}